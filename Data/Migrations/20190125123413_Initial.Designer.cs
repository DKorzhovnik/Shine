// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shine.Data;
using Shine.Data.Models;

namespace Shine.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190125123413_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shine.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Shine.Data.Models.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Value");

                    b.HasKey("CostId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Cost");
                });

            modelBuilder.Entity("Shine.Data.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContinentCode");

                    b.Property<string>("ContinentName");

                    b.Property<string>("CountryName");

                    b.Property<int>("CountryNumber");

                    b.Property<string>("ThreeLetterCountryCode");

                    b.Property<string>("TwoLetterCountryCode");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Shine.Data.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("InvoiceType");

                    b.Property<DateTime>("PaymentDateOne")
                        .HasColumnType("date");

                    b.Property<DateTime>("PaymentDateTwo")
                        .HasColumnType("date");

                    b.Property<decimal>("PaymentOne");

                    b.Property<decimal>("PaymentTwo");

                    b.Property<int>("PeopleId");

                    b.Property<DateTime>("TimeForPayment")
                        .HasColumnType("date");

                    b.HasKey("InvoiceId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("PeopleId");

                    b.ToTable("Invoices");

                    b.HasDiscriminator<bool>("InvoiceType");
                });

            modelBuilder.Entity("Shine.Data.Models.People", b =>
                {
                    b.Property<int>("PeopleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PeopleType");

                    b.Property<string>("Telephone");

                    b.HasKey("PeopleId");

                    b.HasIndex("CountryId");

                    b.ToTable("Peoples");

                    b.HasDiscriminator<int>("PeopleType");
                });

            modelBuilder.Entity("Shine.Data.Models.PeopleProduct", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<int>("ProductId");

                    b.HasKey("PeopleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PeopleProducts");
                });

            modelBuilder.Entity("Shine.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<bool>("ProductType");

                    b.Property<string>("Specification");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasDiscriminator<bool>("ProductType");
                });

            modelBuilder.Entity("Shine.Data.Models.ProductInvoice", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("InvoiceId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductInvoiceType");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Specification");

                    b.Property<decimal>("Tax");

                    b.HasKey("ProductId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("ProductInvoices");

                    b.HasDiscriminator<int>("ProductInvoiceType");
                });

            modelBuilder.Entity("Shine.Data.Models.PurchasesInvoice", b =>
                {
                    b.HasBaseType("Shine.Data.Models.Invoice");

                    b.Property<DateTime>("LocalDateOfIssue")
                        .HasColumnType("date");

                    b.Property<string>("LocalInvoiceNumber")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("Shine.Data.Models.SalesInvoice", b =>
                {
                    b.HasBaseType("Shine.Data.Models.Invoice");

                    b.Property<string>("Currency")
                        .HasMaxLength(10);

                    b.Property<decimal>("RateOne")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("RateTwo")
                        .HasColumnType("decimal(7,2)");

                    b.HasDiscriminator().HasValue(false);
                });

            modelBuilder.Entity("Shine.Data.Models.Customer", b =>
                {
                    b.HasBaseType("Shine.Data.Models.People");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Shine.Data.Models.Employee", b =>
                {
                    b.HasBaseType("Shine.Data.Models.People");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Shine.Data.Models.Supplier", b =>
                {
                    b.HasBaseType("Shine.Data.Models.People");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Shine.Data.Models.User", b =>
                {
                    b.HasBaseType("Shine.Data.Models.People");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Shine.Data.Models.ProductBuy", b =>
                {
                    b.HasBaseType("Shine.Data.Models.Product");

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("Shine.Data.Models.ProductSell", b =>
                {
                    b.HasBaseType("Shine.Data.Models.Product");

                    b.HasDiscriminator().HasValue(false);
                });

            modelBuilder.Entity("Shine.Data.Models.ProductInvoiceBuy", b =>
                {
                    b.HasBaseType("Shine.Data.Models.ProductInvoice");

                    b.Property<decimal>("Rate");

                    b.Property<string>("Unit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Shine.Data.Models.ProductInvoiceSell", b =>
                {
                    b.HasBaseType("Shine.Data.Models.ProductInvoice");

                    b.Property<decimal>("LocalPrice");

                    b.Property<decimal>("LocalQuantity");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Shine.Data.Models.Cost", b =>
                {
                    b.HasOne("Shine.Data.Models.Invoice", "Invoice")
                        .WithMany("Costs")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shine.Data.Models.Invoice", b =>
                {
                    b.HasOne("Shine.Data.Models.People", "People")
                        .WithMany("Invoices")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shine.Data.Models.People", b =>
                {
                    b.HasOne("Shine.Data.Models.Country", "Country")
                        .WithMany("Peoples")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shine.Data.Models.PeopleProduct", b =>
                {
                    b.HasOne("Shine.Data.Models.People", "People")
                        .WithMany("PeopleProducts")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shine.Data.Models.Product", "Product")
                        .WithMany("PeopleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shine.Data.Models.Product", b =>
                {
                    b.HasOne("Shine.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shine.Data.Models.ProductInvoice", b =>
                {
                    b.HasOne("Shine.Data.Models.Invoice", "Invoice")
                        .WithMany("ProductInvoices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shine.Data.Models.Product", "Product")
                        .WithMany("ProductInvoices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
